package com.example.checkit_android.utils

import android.content.Context
import android.net.Uri
import android.content.ContentResolver
import android.content.ContentValues
import android.os.Environment
import android.provider.MediaStore
import com.example.checkit_android.data.Task
import kotlinx.serialization.encodeToString
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.json.Json
import java.io.File
import java.io.InputStream
import java.io.OutputStream

object FileHelper {

    private const val PRIVATE_FILE_NAME = "todos.json"
    const val EXPORT_FILE_NAME = "todo_list.json"

    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
    fun getPrivateTodoFile(context: Context): File {
        return File(context.getExternalFilesDir(null), PRIVATE_FILE_NAME)
    }

    // üëá –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ñ–∞–π–ª (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏)
    fun saveTodos(context: Context, todos: List<Task>) {
        val json = Json.encodeToString(todos)
        getPrivateTodoFile(context).writeText(json)
    }

    // üëá –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
    fun loadTodos(context: Context): List<Task> {
        val file = getPrivateTodoFile(context)
        return if (file.exists()) {
            val json = file.readText()
            Json.decodeFromString<List<Task>>(json)
        } else {
            emptyList()
        }
    }

    // üëá –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ Uri (–∏–º–ø–æ—Ä—Ç)
    fun loadTodosFromUri(context: Context, uri: Uri): List<Task>? {
        return try {
            val contentResolver: ContentResolver = context.contentResolver
            val inputStream: InputStream = contentResolver.openInputStream(uri)!!
            val json = inputStream.bufferedReader().use { it.readText() }
            Json.decodeFromString<List<Task>>(json)
        } catch (e: Exception) {
            e.printStackTrace()
            null
        }
    }

    // üëá –≠–∫—Å–ø–æ—Ä—Ç: –∑–∞–ø–∏—Å—å —Å–ø–∏—Å–∫–∞ –¥–µ–ª –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π Uri (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ Downloads)
    fun exportTodosToUri(context: Context, uri: Uri, todos: List<Task>) {
        try {
            val json = Json.encodeToString(todos)
            val contentResolver: ContentResolver = context.contentResolver
            val outputStream: OutputStream? = contentResolver.openOutputStream(uri)
            outputStream?.use {
                it.write(json.toByteArray())
            }
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }

    // üëá –°–æ–∑–¥–∞—ë–º Uri –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–ø–∫—É Downloads –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–¥–ª—è ACTION_CREATE_DOCUMENT)
    fun createDefaultExportUri(context: Context): Uri? {
        return try {
            val resolver = context.contentResolver
            val contentValues = ContentValues().apply {
                put(MediaStore.Downloads.DISPLAY_NAME, EXPORT_FILE_NAME)
                put(MediaStore.Downloads.MIME_TYPE, "application/json")
                put(MediaStore.Downloads.RELATIVE_PATH, Environment.DIRECTORY_DOWNLOADS)
            }

            resolver.insert(MediaStore.Downloads.EXTERNAL_CONTENT_URI, contentValues)
        } catch (e: Exception) {
            e.printStackTrace()
            null
        }
    }
}